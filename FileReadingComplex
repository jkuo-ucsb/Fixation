#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import h5py
import matplotlib.pyplot as plt

'''
Dictionary holds condition 1 and 2 as keys
These will store our mutable arrays 
Hard code check for 20 vs 40 conditions 
Ok how the fuck do i...optimize? remove data object from this dataset object??
'''
f = h5py.File('free_fix_events.hdf5', 'r')
temp1 = f["data_collection"]
#print(list(temp1["events"]))
messages = temp1["events"]["experiment"]["MessageEvent"]
fix_end = temp1["events"]["eyetracker"]["FixationEndEvent"]
fix_start = temp1["events"]["eyetracker"]["FixationStartEvent"]
sac_end = temp1["events"]["eyetracker"]["SaccadeEndEvent"]
sac_start = temp1["events"]["eyetracker"]["SaccadeStartEvent"]
mes_text_list = []
mes_time_list = []
fix_time = []

plotData = {
        "condition40" : {"x" : [], "y" : [], "fixtime" : []},        
        "condition20" : {"x" : [], "y" : [], "fixtime" : []},        
}

session_max = 1
for sac in sac_end: 
    sess = sac["session_id"]
    if sess > session_max:
        session_max = sess
        
cond1_sessions = []; cond2_sessions = [] 
for mes in messages: 
    mestest = mes["text"]
    mestest = mestest.decode('UTF-8')
    if "START_TRIAL" in mestest or "END_TRIAL" in mestest:
        mes_time_list.append(mes["time"])
    if "40" in mestest: #probably? should only append once since the message is once per session LOL
        cond1_sessions.append(mes["session_id"])
    if "20" in mestest:
        cond2_sessions.append(mes["session_id"])

    
graphnum = 0
for session in range(0,session_max): #Loops through every session
    trial=1; graphnum = 0; i = 0
        
    while i < (len(mes_time_list)-1): #Loops through every trial per session
        sac_x = []
        sac_y = []
        fix_auto_dur = []
        
        stime = mes_time_list[i] 
        etime = mes_time_list[i+1]
        for sac in sac_end: 
            sactime = sac["time"]
            if stime <= sactime and etime >= sactime:
                sac_x.append(sac["end_gaze_x"])
                sac_y.append(sac["end_gaze_y"])
                
        
        for fix in fix_end:  
            fixtime = fix["time"]
            fix_time.append(fixtime)
            if stime <= fixtime and fixtime <= etime:
                fix_auto_dur.append(fix["duration"])
            
        for x in range(len(sac_y)):
            sac_x[x]+=1280/2
            sac_y[x]+=1024/2
        
        if session+1 in cond1_sessions:
            print("cond1")
            plotData["condition40"]["x"].append(sac_x)
            plotData["condition40"]["y"].append(sac_y)
            plotData["condition40"]["fixtime"].append(fix_auto_dur)
        
        if session+1 in cond2_sessions:
            print("cond2")
            plotData["condition20"]["x"].append(sac_x)
            plotData["condition20"]["y"].append(sac_y)
            plotData["condition20"]["fixtime"].append(fix_auto_dur)
        graphnum+=1; i+=2; 

print("all done!")
'''plt.close()
axes = plt.gca()
axes.set_xlim([0,1280]); axes.set_ylim([0,1024]); axes.set_xlabel("Width"); axes.set_ylabel("Height")
axes.set_title("TRIAL " + str(graphnum)); axes.text(x= 0, y = 1050, s="Fixations: " + str(len(fix_auto_dur)))
mark_size = []
for n in fix_auto_dur:
    mark_size.append(200*n)
plt.scatter(sac_x, sac_y, s=mark_size); plt.show(); plt.close()'''
    

